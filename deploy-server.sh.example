#!/bin/bash

# Cloudflare Turnstile Goat 服务器部署脚本示例
# 复制此文件为 deploy-server.sh 并修改相应的配置

set -e  # 遇到错误立即退出

# 配置变量 - 请修改为你的实际配置
DOCKER_USERNAME="your-dockerhub-username"  # 修改为你的Docker Hub用户名
IMAGE_NAME="cloudflare-turnstile-goat"
IMAGE_TAG="latest"
FULL_IMAGE_NAME="${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
CONTAINER_NAME="cloudflare-turnstile-goat"
SERVICE_PORT="52669"
DOMAIN="yourdomain.com"  # 修改为你的域名

# 服务器配置 - 请修改为你的服务器信息
REMOTE_HOST="root@your-server-ip"  # 修改为你的服务器地址
JUMP_HOST="root@your-jump-server-ip"  # 如果有跳板机，修改此项；否则删除相关代码

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查配置
check_config() {
    if [ "$DOCKER_USERNAME" = "your-dockerhub-username" ]; then
        log_error "请修改脚本中的DOCKER_USERNAME为你的Docker Hub用户名"
        exit 1
    fi
    
    if [ "$REMOTE_HOST" = "root@your-server-ip" ]; then
        log_error "请修改脚本中的REMOTE_HOST为你的服务器地址"
        exit 1
    fi
}

# 在服务器上安装Docker
install_docker() {
    log_info "在服务器上安装Docker..."
    
    # 如果有跳板机，使用 -J 参数；否则直接连接
    ssh -J ${JUMP_HOST} ${REMOTE_HOST} << 'EOF'
    # 或者直接连接：ssh ${REMOTE_HOST} << 'EOF'
set -e

# 检查Docker是否已安装
if command -v docker &> /dev/null; then
    echo "Docker已安装，版本："
    docker --version
else
    echo "安装Docker..."
    
    # 安装Docker
    yum install -y yum-utils
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    yum install -y docker-ce docker-ce-cli containerd.io
    
    # 启动Docker服务
    systemctl start docker
    systemctl enable docker
    
    echo "Docker安装完成"
fi
EOF

    log_info "Docker安装完成"
}

# 在服务器上部署应用
deploy_application() {
    log_info "在服务器上部署应用..."
    
    ssh -J ${JUMP_HOST} ${REMOTE_HOST} << EOF
set -e

FULL_IMAGE_NAME="${FULL_IMAGE_NAME}"
CONTAINER_NAME="${CONTAINER_NAME}"
SERVICE_PORT="${SERVICE_PORT}"
DOMAIN="${DOMAIN}"

echo "开始部署应用..."

# 停止并删除现有容器
echo "停止现有容器..."
docker stop \${CONTAINER_NAME} 2>/dev/null || true
docker rm \${CONTAINER_NAME} 2>/dev/null || true

# 删除旧镜像（可选）
echo "删除旧镜像..."
docker rmi \${FULL_IMAGE_NAME} 2>/dev/null || true

# 拉取最新镜像
echo "拉取最新镜像: \${FULL_IMAGE_NAME}"
docker pull \${FULL_IMAGE_NAME}

# 启动新容器
echo "启动新容器..."
docker run -d \\
  --name \${CONTAINER_NAME} \\
  --restart unless-stopped \\
  -p \${SERVICE_PORT}:\${SERVICE_PORT} \\
  -e FLASK_ENV=production \\
  -e FLASK_DEBUG=false \\
  -e FLASK_HOST=0.0.0.0 \\
  -e FLASK_PORT=\${SERVICE_PORT} \\
  -e TURNSTILE_SITE_KEY=1x00000000000000000000AA \\
  -e TURNSTILE_SECRET_KEY=1x0000000000000000000000000000000AA \\
  -e CORS_ORIGINS=https://\${DOMAIN},http://\${DOMAIN} \\
  \${FULL_IMAGE_NAME}

# 等待容器启动
echo "等待容器启动..."
sleep 15

# 检查容器状态
echo "检查容器状态..."
docker ps | grep \${CONTAINER_NAME}

echo "应用部署完成"
EOF

    log_info "应用部署完成"
}

# 配置nginx反向代理
configure_nginx() {
    log_info "配置nginx反向代理..."
    
    ssh -J ${JUMP_HOST} ${REMOTE_HOST} << EOF
set -e

DOMAIN="${DOMAIN}"
SERVICE_PORT="${SERVICE_PORT}"

# 安装nginx（如果不存在）
if ! command -v nginx &> /dev/null; then
    echo "安装nginx..."
    yum install -y nginx
fi

# 停止nginx
systemctl stop nginx 2>/dev/null || true

# 创建nginx配置
cat > /etc/nginx/nginx.conf << 'NGINX_CONF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    server {
        listen 80;
        server_name \${DOMAIN} _;
        
        location / {
            proxy_pass http://127.0.0.1:\${SERVICE_PORT};
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
NGINX_CONF

# 测试nginx配置
nginx -t

# 启动nginx
systemctl start nginx
systemctl enable nginx

echo "nginx配置完成"
EOF

    log_info "nginx配置完成"
}

# 测试部署
test_deployment() {
    log_info "测试部署..."
    
    # 等待服务完全启动
    sleep 20
    
    # 测试API
    if curl -f "http://${DOMAIN}/api/config" > /dev/null 2>&1; then
        log_info "API测试通过"
    else
        log_warn "API测试失败，可能服务还在启动中"
    fi
    
    log_info "部署测试完成"
}

# 显示部署信息
show_deployment_info() {
    log_info "部署完成！"
    echo ""
    echo "访问信息："
    echo "  网站地址: http://${DOMAIN}"
    echo "  API地址: http://${DOMAIN}/api"
    echo ""
    echo "Docker管理命令（在服务器上执行）："
    echo "  查看容器状态: docker ps"
    echo "  查看容器日志: docker logs ${CONTAINER_NAME}"
    echo "  重启容器: docker restart ${CONTAINER_NAME}"
    echo "  停止容器: docker stop ${CONTAINER_NAME}"
    echo ""
}

# 主函数
main() {
    log_info "开始服务器部署 Cloudflare Turnstile Goat..."
    
    check_config
    install_docker
    deploy_application
    configure_nginx
    test_deployment
    show_deployment_info
}

# 执行主函数
main "$@"
